
** Conflict (shift/reduce) in state 148.
** Token involved: LPAREN
** This state is reached from prog after reading:

option(module_clause) import_decls LET var_decorator LNAME ASSIGN primary_expression DOT name gen_ty_consume 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
option(module_clause) import_decls top_defns EOF 
                                   definition SEMI top_defns 
                                   vars_decl 
                                   mark_position(plain_vars_decl) 
                                   plain_vars_decl 
                                   LET separated_nonempty_list(COMMA,var_decl) 
                                       var_decl 
                                       mark_position(plain_var_decl) 
                                       plain_var_decl 
                                       var_decorator LNAME ASSIGN arithmetic_expression 
                                                                  bin_expression 
                                                                  unary_expression 
                                                                  primary_expression 
                                                                  mark_position(plain_primary_expression) 
                                                                  plain_primary_expression 
                                                                  primary_expression_access 
                                                                  (?)

** In state 148, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

primary_expression DOT name gen_ty_consume function_call_params 
                                           . LPAREN RPAREN 

** In state 148, looking ahead at LPAREN, reducing production
** primary_expression_access -> primary_expression DOT name gen_ty_consume 
** is permitted because of the following sub-derivation:

primary_expression function_call_params // lookahead token appears because function_call_params can begin with LPAREN
mark_position(plain_primary_expression) // lookahead token is inherited
plain_primary_expression // lookahead token is inherited
primary_expression_access // lookahead token is inherited
primary_expression DOT name gen_ty_consume . 

** Conflict (shift/reduce) in state 147.
** Tokens involved: SMALLER LPAREN
** The following explanations concentrate on token SMALLER.
** This state is reached from prog after reading:

option(module_clause) import_decls LET var_decorator LNAME ASSIGN primary_expression DOT name 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
option(module_clause) import_decls top_defns EOF 
                                   definition SEMI top_defns 
                                   vars_decl 
                                   mark_position(plain_vars_decl) 
                                   plain_vars_decl 
                                   LET separated_nonempty_list(COMMA,var_decl) 
                                       var_decl 
                                       mark_position(plain_var_decl) 
                                       plain_var_decl 
                                       var_decorator LNAME ASSIGN arithmetic_expression 
                                                                  bin_expression 
                                                                  (?)

** In state 147, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

unary_expression 
primary_expression 
mark_position(plain_primary_expression) 
plain_primary_expression 
primary_expression_access 
primary_expression DOT name gen_ty_consume 
                            . SMALLER gen_ty_consume_list LARGER 

** In state 147, looking ahead at SMALLER, reducing production
** primary_expression_access -> primary_expression DOT name 
** is permitted because of the following sub-derivation:

bin_expression SMALLER bin_expression // lookahead token appears
unary_expression // lookahead token is inherited
primary_expression // lookahead token is inherited
mark_position(plain_primary_expression) // lookahead token is inherited
plain_primary_expression // lookahead token is inherited
primary_expression_access // lookahead token is inherited
primary_expression DOT name . 

** Conflict (shift/reduce) in state 110.
** Token involved: SMALLER
** This state is reached from prog after reading:

option(module_clause) import_decls LET var_decorator LNAME ASSIGN name 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
option(module_clause) import_decls top_defns EOF 
                                   definition SEMI top_defns 
                                   vars_decl 
                                   mark_position(plain_vars_decl) 
                                   plain_vars_decl 
                                   LET separated_nonempty_list(COMMA,var_decl) 
                                       var_decl 
                                       mark_position(plain_var_decl) 
                                       plain_var_decl 
                                       var_decorator LNAME ASSIGN arithmetic_expression 
                                                                  bin_expression 
                                                                  (?)

** In state 110, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

unary_expression 
primary_expression 
mark_position(plain_primary_expression) 
plain_primary_expression 
primary_expression_access 
primary_expression_start 
name gen_ty_consume 
     . SMALLER gen_ty_consume_list LARGER 

** In state 110, looking ahead at SMALLER, reducing production
** primary_expression_start -> name 
** is permitted because of the following sub-derivation:

bin_expression SMALLER bin_expression // lookahead token appears
unary_expression // lookahead token is inherited
primary_expression // lookahead token is inherited
mark_position(plain_primary_expression) // lookahead token is inherited
plain_primary_expression // lookahead token is inherited
primary_expression_access // lookahead token is inherited
primary_expression_start // lookahead token is inherited
name . 

** Conflict (shift/reduce) in state 106.
** Token involved: SMALLER
** This state is reached from prog after reading:

option(module_clause) import_decls LET var_decorator LNAME ASSIGN primary_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
option(module_clause) import_decls top_defns EOF 
                                   definition SEMI top_defns 
                                   vars_decl 
                                   mark_position(plain_vars_decl) 
                                   plain_vars_decl 
                                   LET separated_nonempty_list(COMMA,var_decl) 
                                       var_decl 
                                       mark_position(plain_var_decl) 
                                       plain_var_decl 
                                       var_decorator LNAME ASSIGN arithmetic_expression 
                                                                  bin_expression 
                                                                  (?)

** In state 106, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

unary_expression 
primary_expression 
mark_position(plain_primary_expression) 
plain_primary_expression 
primary_expression_access 
primary_expression gen_ty_consume function_call_params 
                   . SMALLER gen_ty_consume_list LARGER 

** In state 106, looking ahead at SMALLER, reducing production
** unary_expression -> primary_expression 
** is permitted because of the following sub-derivation:

bin_expression SMALLER bin_expression // lookahead token appears
unary_expression // lookahead token is inherited
primary_expression . 
