prog: CLASS UNAME COLON WHILE
##
## Ends in an error in state: 369.
##
## plain_class_def -> CLASS class_head COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS class_head COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME IMPL UNAME COLON WHILE
##
## Ends in an error in state: 348.
##
## plain_impl_def -> CLASS uname IMPL uname COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname IMPL uname COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME IMPL UNAME SMALLER GNAME LARGER COLON WHILE
##
## Ends in an error in state: 352.
##
## plain_impl_def -> CLASS uname IMPL uname gen_ty_consume COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname IMPL uname gen_ty_consume COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME IMPL UNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 351.
##
## plain_impl_def -> CLASS uname IMPL uname gen_ty_consume . COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname IMPL uname gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME IMPL UNAME WHILE
##
## Ends in an error in state: 347.
##
## plain_impl_def -> CLASS uname IMPL uname . COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname IMPL uname . gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname IMPL uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME IMPL WHILE
##
## Ends in an error in state: 346.
##
## plain_impl_def -> CLASS uname IMPL . uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname IMPL . uname gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname IMPL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME RPAREN WHILE
##
## Ends in an error in state: 368.
##
## plain_class_def -> CLASS class_head . COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS class_head
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 344.
##
## class_father -> LPAREN uname gen_ty_consume . RPAREN [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN uname gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME SMALLER UNAME COMMA WHILE
##
## Ends in an error in state: 112.
##
## gen_ty_consume_list -> ty COMMA . gen_ty_consume_list [ LARGER ]
##
## The known suffix of the stack is as follows:
## ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME SMALLER UNAME SEMI
##
## Ends in an error in state: 111.
##
## gen_ty_consume_list -> ty . [ LARGER ]
## gen_ty_consume_list -> ty . COMMA gen_ty_consume_list [ LARGER ]
##
## The known suffix of the stack is as follows:
## ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME SMALLER WHILE
##
## Ends in an error in state: 110.
##
## gen_ty_consume -> SMALLER . gen_ty_consume_list LARGER [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## SMALLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN UNAME WHILE
##
## Ends in an error in state: 342.
##
## class_father -> LPAREN uname . RPAREN [ COLON ]
## class_father -> LPAREN uname . gen_ty_consume RPAREN [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME LPAREN WHILE
##
## Ends in an error in state: 341.
##
## class_father -> LPAREN . uname RPAREN [ COLON ]
## class_father -> LPAREN . uname gen_ty_consume RPAREN [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER IMPL UNAME COLON WHILE
##
## Ends in an error in state: 359.
##
## plain_impl_def -> CLASS uname gen_ty_def IMPL uname COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def IMPL uname COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER IMPL UNAME SMALLER GNAME LARGER COLON WHILE
##
## Ends in an error in state: 363.
##
## plain_impl_def -> CLASS uname gen_ty_def IMPL uname gen_ty_consume COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def IMPL uname gen_ty_consume COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER IMPL UNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 362.
##
## plain_impl_def -> CLASS uname gen_ty_def IMPL uname gen_ty_consume . COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def IMPL uname gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER IMPL UNAME WHILE
##
## Ends in an error in state: 358.
##
## plain_impl_def -> CLASS uname gen_ty_def IMPL uname . COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname gen_ty_def IMPL uname . gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def IMPL uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER IMPL WHILE
##
## Ends in an error in state: 357.
##
## plain_impl_def -> CLASS uname gen_ty_def IMPL . uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname gen_ty_def IMPL . uname gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def IMPL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 356.
##
## class_head -> uname gen_ty_def . option(class_father) [ COLON ]
## plain_impl_def -> CLASS uname gen_ty_def . IMPL uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname gen_ty_def . IMPL uname gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname gen_ty_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNAME WHILE
##
## Ends in an error in state: 340.
##
## class_head -> uname . option(class_father) [ COLON ]
## class_head -> uname . gen_ty_def option(class_father) [ COLON ]
## plain_impl_def -> CLASS uname . IMPL uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname . gen_ty_def IMPL uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname . IMPL uname gen_ty_consume COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS uname . gen_ty_def IMPL uname gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS WHILE
##
## Ends in an error in state: 339.
##
## plain_class_def -> CLASS . class_head COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS . uname IMPL uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS . uname gen_ty_def IMPL uname COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS . uname IMPL uname gen_ty_consume COLON class_body END [ SEMI EOF ]
## plain_impl_def -> CLASS . uname gen_ty_def IMPL uname gen_ty_consume COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## CLASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN CONST WHILE
##
## Ends in an error in state: 214.
##
## param_def -> var_decorator . lname COLON ty [ RPAREN COMMA ]
## param_def -> var_decorator . lname [ RPAREN COMMA ]
## param_def -> var_decorator . lname COLON ty ASSIGN bin_expression [ RPAREN COMMA ]
## param_def -> var_decorator . lname ASSIGN bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME ASSIGN UNAME SEMI
##
## Ends in an error in state: 221.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## param_def -> var_decorator lname ASSIGN bin_expression . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname ASSIGN bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME ASSIGN WHILE
##
## Ends in an error in state: 220.
##
## param_def -> var_decorator lname ASSIGN . bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME COLON UNAME ASSIGN UNAME SEMI
##
## Ends in an error in state: 219.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## param_def -> var_decorator lname COLON ty ASSIGN bin_expression . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname COLON ty ASSIGN bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME COLON UNAME ASSIGN WHILE
##
## Ends in an error in state: 218.
##
## param_def -> var_decorator lname COLON ty ASSIGN . bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname COLON ty ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME COLON UNAME SEMI
##
## Ends in an error in state: 217.
##
## param_def -> var_decorator lname COLON ty . [ RPAREN COMMA ]
## param_def -> var_decorator lname COLON ty . ASSIGN bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME COLON WHILE
##
## Ends in an error in state: 216.
##
## param_def -> var_decorator lname COLON . ty [ RPAREN COMMA ]
## param_def -> var_decorator lname COLON . ty ASSIGN bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME COMMA WHILE
##
## Ends in an error in state: 223.
##
## function_param_list -> param_def COMMA . function_param_list [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_def COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN LNAME WHILE
##
## Ends in an error in state: 215.
##
## param_def -> var_decorator lname . COLON ty [ RPAREN COMMA ]
## param_def -> var_decorator lname . [ RPAREN COMMA ]
## param_def -> var_decorator lname . COLON ty ASSIGN bin_expression [ RPAREN COMMA ]
## param_def -> var_decorator lname . ASSIGN bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator lname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN ARROW TRAIT
##
## Ends in an error in state: 262.
##
## plain_function_def -> FN LNAME function_params ARROW . block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN ARROW UNAME ELSE
##
## Ends in an error in state: 263.
##
## plain_function_def -> FN LNAME function_params ARROW block . END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN ARROW UNAME RPAREN
##
## Ends in an error in state: 245.
##
## block -> expression . [ END ELSE ELIF ]
## block -> expression . sep block [ END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN ARROW UNAME SEMI TRAIT
##
## Ends in an error in state: 246.
##
## block -> expression sep . block [ END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## expression sep
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(single_sep) -> single_sep 
## In state 10, spurious reduction of production sep -> nonempty_list(single_sep) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN COLON UNAME ARROW TRAIT
##
## Ends in an error in state: 259.
##
## plain_function_def -> FN LNAME function_params COLON ty ARROW . block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params COLON ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN COLON UNAME ARROW UNAME ELSE
##
## Ends in an error in state: 260.
##
## plain_function_def -> FN LNAME function_params COLON ty ARROW block . END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params COLON ty ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN COLON UNAME SEMI
##
## Ends in an error in state: 258.
##
## plain_function_def -> FN LNAME function_params COLON ty . ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 257.
##
## plain_function_def -> FN LNAME function_params COLON . ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN RPAREN WHILE
##
## Ends in an error in state: 256.
##
## plain_function_def -> FN LNAME function_params . ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME function_params . COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME function_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME LPAREN WHILE
##
## Ends in an error in state: 212.
##
## function_params -> LPAREN . RPAREN [ COLON ARROW ]
## function_params -> LPAREN . function_param_list RPAREN [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN ARROW TRAIT
##
## Ends in an error in state: 253.
##
## plain_function_def -> FN LNAME gen_ty_def function_params ARROW . block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN ARROW UNAME ELSE
##
## Ends in an error in state: 254.
##
## plain_function_def -> FN LNAME gen_ty_def function_params ARROW block . END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME ARROW TRAIT
##
## Ends in an error in state: 231.
##
## plain_function_def -> FN LNAME gen_ty_def function_params COLON ty ARROW . block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params COLON ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME ARROW UNAME ELSE
##
## Ends in an error in state: 251.
##
## plain_function_def -> FN LNAME gen_ty_def function_params COLON ty ARROW block . END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params COLON ty ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME SEMI
##
## Ends in an error in state: 230.
##
## plain_function_def -> FN LNAME gen_ty_def function_params COLON ty . ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 229.
##
## plain_function_def -> FN LNAME gen_ty_def function_params COLON . ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER LPAREN RPAREN WHILE
##
## Ends in an error in state: 228.
##
## plain_function_def -> FN LNAME gen_ty_def function_params . ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME gen_ty_def function_params . COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def function_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 227.
##
## plain_function_def -> FN LNAME gen_ty_def . function_params ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME gen_ty_def . function_params COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME gen_ty_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN LNAME WHILE
##
## Ends in an error in state: 211.
##
## plain_function_def -> FN LNAME . function_params ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME . function_params COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME . gen_ty_def function_params ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN LNAME . gen_ty_def function_params COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN LNAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FN WHILE
##
## Ends in an error in state: 210.
##
## plain_function_def -> FN . LNAME function_params ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN . LNAME function_params COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN . LNAME gen_ty_def function_params ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
## plain_function_def -> FN . LNAME gen_ty_def function_params COLON ty ARROW block END [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME COMMA WHILE
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,module_path_list) -> module_path_list COMMA . separated_nonempty_list(COMMA,module_path_list) [ SEMI ]
##
## The known suffix of the stack is as follows:
## module_path_list COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT LPAREN LNAME RPAREN WHILE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,module_path_list) -> module_path_list . [ SEMI ]
## separated_nonempty_list(COMMA,module_path_list) -> module_path_list . COMMA separated_nonempty_list(COMMA,module_path_list) [ SEMI ]
##
## The known suffix of the stack is as follows:
## module_path_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT LPAREN UNAME COMMA WHILE
##
## Ends in an error in state: 33.
##
## separated_nonempty_list(COMMA,module_path) -> module_path COMMA . separated_nonempty_list(COMMA,module_path) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## module_path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT LPAREN UNAME DOT WHILE
##
## Ends in an error in state: 30.
##
## module_path -> name DOT . module_path [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## name DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT LPAREN UNAME WHILE
##
## Ends in an error in state: 29.
##
## module_path -> name . [ RPAREN COMMA ]
## module_path -> name . DOT module_path [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT LPAREN WHILE
##
## Ends in an error in state: 26.
##
## module_path_list -> module_root_path LPAREN . separated_nonempty_list(COMMA,module_path) RPAREN [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## module_root_path LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME DOT WHILE
##
## Ends in an error in state: 23.
##
## module_root_path -> name DOT . [ LPAREN ]
## module_root_path -> name DOT . module_root_path [ LPAREN ]
## separated_nonempty_list(DOT,name) -> name DOT . separated_nonempty_list(DOT,name) [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## name DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME SEMI WHILE
##
## Ends in an error in state: 393.
##
## list(import_decl) -> import_decl . list(import_decl) [ TRAIT LET FN EOF CLASS ]
##
## The known suffix of the stack is as follows:
## import_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(single_sep) -> single_sep 
## In state 10, spurious reduction of production sep -> nonempty_list(single_sep) 
## In state 21, spurious reduction of production plain_import_decl -> IMPORT separated_nonempty_list(COMMA,module_path_list) sep 
## In state 38, spurious reduction of production mark_position(plain_import_decl) -> plain_import_decl 
## In state 39, spurious reduction of production import_decl -> mark_position(plain_import_decl) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT UNAME WHILE
##
## Ends in an error in state: 22.
##
## module_root_path -> name . DOT [ LPAREN ]
## module_root_path -> name . DOT module_root_path [ LPAREN ]
## separated_nonempty_list(DOT,name) -> name . [ SEMI COMMA ]
## separated_nonempty_list(DOT,name) -> name . DOT separated_nonempty_list(DOT,name) [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IMPORT WHILE
##
## Ends in an error in state: 18.
##
## plain_import_decl -> IMPORT . separated_nonempty_list(COMMA,module_path_list) sep [ TRAIT LET IMPORT FN EOF CLASS ]
##
## The known suffix of the stack is as follows:
## IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET CONST WHILE
##
## Ends in an error in state: 187.
##
## plain_var_decl -> var_decorator . LNAME COLON ty [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator . LNAME COLON ty ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator . LNAME ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN BOOL RBRACK
##
## Ends in an error in state: 195.
##
## separated_nonempty_list(COMMA,var_decl) -> var_decl . [ SEMI RPAREN EOF END ELSE ELIF ]
## separated_nonempty_list(COMMA,var_decl) -> var_decl . COMMA separated_nonempty_list(COMMA,var_decl) [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## var_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 194, spurious reduction of production plain_var_decl -> var_decorator LNAME ASSIGN arithmetic_expression 
## In state 198, spurious reduction of production mark_position(plain_var_decl) -> plain_var_decl 
## In state 200, spurious reduction of production var_decl -> mark_position(plain_var_decl) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LBRACK UNAME COMMA WHILE
##
## Ends in an error in state: 175.
##
## separated_nonempty_list(COMMA,arithmetic_expression) -> arithmetic_expression COMMA . separated_nonempty_list(COMMA,arithmetic_expression) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## arithmetic_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LBRACK UNAME SEMI
##
## Ends in an error in state: 174.
##
## separated_nonempty_list(COMMA,arithmetic_expression) -> arithmetic_expression . [ RBRACK ]
## separated_nonempty_list(COMMA,arithmetic_expression) -> arithmetic_expression . COMMA separated_nonempty_list(COMMA,arithmetic_expression) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## arithmetic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LBRACK WHILE
##
## Ends in an error in state: 95.
##
## primary_expression_start -> LBRACK . RBRACK [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_start -> LBRACK . separated_nonempty_list(COMMA,arithmetic_expression) RBRACK [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN BEGIN TRAIT
##
## Ends in an error in state: 239.
##
## plain_expression -> BEGIN . block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## BEGIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN BEGIN UNAME ELSE
##
## Ends in an error in state: 249.
##
## plain_expression -> BEGIN block . END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## BEGIN block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN BREAK LPAREN WHILE
##
## Ends in an error in state: 237.
##
## plain_expression -> BREAK LPAREN . arithmetic_expression [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## BREAK LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN BREAK WHILE
##
## Ends in an error in state: 236.
##
## plain_expression -> BREAK . LPAREN arithmetic_expression [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## BREAK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN CONTINUE WHILE
##
## Ends in an error in state: 234.
##
## plain_expression -> CONTINUE . arithmetic_expression [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## CONTINUE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN DEL WHILE
##
## Ends in an error in state: 232.
##
## plain_expression -> DEL . name [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## DEL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR LNAME IN UNAME COLON TRAIT
##
## Ends in an error in state: 209.
##
## plain_expression -> FOR lname IN unary_expression COLON . block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR lname IN unary_expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR LNAME IN UNAME COLON UNAME ELSE
##
## Ends in an error in state: 265.
##
## plain_expression -> FOR lname IN unary_expression COLON block . END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR lname IN unary_expression COLON block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR LNAME IN UNAME STAR
##
## Ends in an error in state: 208.
##
## plain_expression -> FOR lname IN unary_expression . COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR lname IN unary_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR LNAME IN WHILE
##
## Ends in an error in state: 207.
##
## plain_expression -> FOR lname IN . unary_expression COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR lname IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR LNAME WHILE
##
## Ends in an error in state: 206.
##
## plain_expression -> FOR lname . IN unary_expression COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR lname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN FOR WHILE
##
## Ends in an error in state: 205.
##
## plain_expression -> FOR . lname IN unary_expression COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELIF UNAME COLON TRAIT
##
## Ends in an error in state: 270.
##
## elif_expression -> ELIF bin_expression COLON . block [ END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## ELIF bin_expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELIF UNAME SEMI
##
## Ends in an error in state: 269.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## elif_expression -> ELIF bin_expression . COLON block [ END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## ELIF bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELIF WHILE
##
## Ends in an error in state: 268.
##
## elif_expression -> ELIF . bin_expression COLON block [ END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## ELIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELSE COLON BOOL ELSE
##
## Ends in an error in state: 276.
##
## if_expression -> IF bin_expression COLON block list(elif_expression) option(else_expression) . END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## IF bin_expression COLON block list(elif_expression) option(else_expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
## In state 275, spurious reduction of production else_expression -> ELSE COLON block 
## In state 278, spurious reduction of production option(else_expression) -> else_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELSE COLON TRAIT
##
## Ends in an error in state: 274.
##
## else_expression -> ELSE COLON . block [ END ]
##
## The known suffix of the stack is as follows:
## ELSE COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON ELSE WHILE
##
## Ends in an error in state: 273.
##
## else_expression -> ELSE . COLON block [ END ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME COLON TRAIT
##
## Ends in an error in state: 204.
##
## if_expression -> IF bin_expression COLON . block list(elif_expression) option(else_expression) END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## IF bin_expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF UNAME SEMI
##
## Ends in an error in state: 203.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COLON BARBAR AMPERAMPER ]
## if_expression -> IF bin_expression . COLON block list(elif_expression) option(else_expression) END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## IF bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN IF WHILE
##
## Ends in an error in state: 202.
##
## if_expression -> IF . bin_expression COLON block list(elif_expression) option(else_expression) END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN LOOP TRAIT
##
## Ends in an error in state: 185.
##
## plain_expression -> LOOP . block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN LOOP UNAME ELSE
##
## Ends in an error in state: 281.
##
## plain_expression -> LOOP block . END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## LOOP block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN PRINT LPAREN UNAME SEMI
##
## Ends in an error in state: 183.
##
## plain_expression -> PRINT LPAREN arithmetic_expression . RPAREN [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN arithmetic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN PRINT LPAREN WHILE
##
## Ends in an error in state: 182.
##
## plain_expression -> PRINT LPAREN . arithmetic_expression RPAREN [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## PRINT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN PRINT WHILE
##
## Ends in an error in state: 181.
##
## plain_expression -> PRINT . LPAREN arithmetic_expression RPAREN [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## PRINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN RET WHILE
##
## Ends in an error in state: 179.
##
## plain_expression -> RET . arithmetic_expression [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## RET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN TRAIT
##
## Ends in an error in state: 93.
##
## primary_expression_start -> LPAREN . plain_expression RPAREN [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN UNAME SEMI
##
## Ends in an error in state: 285.
##
## primary_expression_start -> LPAREN plain_expression . RPAREN [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## LPAREN plain_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN WHILE UNAME COLON TRAIT
##
## Ends in an error in state: 178.
##
## plain_expression -> WHILE arithmetic_expression COLON . block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## WHILE arithmetic_expression COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN WHILE UNAME COLON UNAME ELSE
##
## Ends in an error in state: 283.
##
## plain_expression -> WHILE arithmetic_expression COLON block . END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## WHILE arithmetic_expression COLON block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN WHILE UNAME SEMI
##
## Ends in an error in state: 177.
##
## plain_expression -> WHILE arithmetic_expression . COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## WHILE arithmetic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN LPAREN WHILE WHILE
##
## Ends in an error in state: 94.
##
## plain_expression -> WHILE . arithmetic_expression COLON block END [ SEMI RPAREN END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN MINUS WHILE
##
## Ends in an error in state: 92.
##
## unary_expression -> MINUS . unary_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIV_ASSIGN DIVIDE COMMA COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN NEW UNAME COLONCOLON SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 298.
##
## primary_expression_start -> NEW uname COLONCOLON gen_ty_consume . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## NEW uname COLONCOLON gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN NEW UNAME COLONCOLON WHILE
##
## Ends in an error in state: 297.
##
## primary_expression_start -> NEW uname COLONCOLON . gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## NEW uname COLONCOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN NEW UNAME WHILE
##
## Ends in an error in state: 89.
##
## primary_expression_start -> NEW uname . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_start -> NEW uname . COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## NEW uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN NEW WHILE
##
## Ends in an error in state: 88.
##
## primary_expression_start -> NEW . uname function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_start -> NEW . uname COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## NEW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN NOT WHILE
##
## Ends in an error in state: 87.
##
## unary_expression -> NOT . unary_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIV_ASSIGN DIVIDE COMMA COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN THIS COLONCOLON SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 158.
##
## primary_expression_access -> primary_expression COLONCOLON gen_ty_consume . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression COLONCOLON gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN THIS COLONCOLON WHILE
##
## Ends in an error in state: 157.
##
## primary_expression_access -> primary_expression COLONCOLON . gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression COLONCOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN THIS WHILE
##
## Ends in an error in state: 104.
##
## plain_primary_expression -> primary_expression . LBRACK arithmetic_expression RBRACK [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . DOT name [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . DOT name function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . DOT name COLONCOLON gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . DOT name COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression . COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## unary_expression -> primary_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIV_ASSIGN DIVIDE COMMA COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME AMPERAMPER UNAME PLUS_ASSIGN
##
## Ends in an error in state: 147.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression AMPERAMPER bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression AMPERAMPER bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME AMPERAMPER WHILE
##
## Ends in an error in state: 146.
##
## bin_expression -> bin_expression AMPERAMPER . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression AMPERAMPER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME ASSIGN WHILE
##
## Ends in an error in state: 170.
##
## plain_assignment -> unary_expression ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME BARBAR UNAME PLUS_ASSIGN
##
## Ends in an error in state: 145.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression BARBAR bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression BARBAR bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME BARBAR WHILE
##
## Ends in an error in state: 144.
##
## bin_expression -> bin_expression BARBAR . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression BARBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME COLONCOLON WHILE
##
## Ends in an error in state: 109.
##
## primary_expression_start -> name COLONCOLON . gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## name COLONCOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DIVIDE BOOL PLUS_ASSIGN
##
## Ends in an error in state: 120.
##
## arithmetic_expression -> bin_expression . [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
## In state 131, spurious reduction of production bin_expression -> bin_expression DIVIDE bin_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DIVIDE WHILE
##
## Ends in an error in state: 130.
##
## bin_expression -> bin_expression DIVIDE . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression DIVIDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DIV_ASSIGN WHILE
##
## Ends in an error in state: 168.
##
## plain_assignment -> unary_expression DIV_ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression DIV_ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DOT UNAME COLONCOLON SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 154.
##
## primary_expression_access -> primary_expression DOT name COLONCOLON gen_ty_consume . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT name COLONCOLON gen_ty_consume . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression DOT name COLONCOLON gen_ty_consume
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DOT UNAME COLONCOLON WHILE
##
## Ends in an error in state: 153.
##
## primary_expression_access -> primary_expression DOT name COLONCOLON . gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT name COLONCOLON . gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression DOT name COLONCOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DOT UNAME WHILE
##
## Ends in an error in state: 152.
##
## primary_expression_access -> primary_expression DOT name . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT name . function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT name . COLONCOLON gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT name . COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression DOT name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME DOT WHILE
##
## Ends in an error in state: 151.
##
## primary_expression_access -> primary_expression DOT . name [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT . name function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT . name COLONCOLON gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_access -> primary_expression DOT . name COLONCOLON gen_ty_consume function_call_params [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME EQUAL UNAME PLUS_ASSIGN
##
## Ends in an error in state: 143.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression EQUAL bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression EQUAL bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME EQUAL WHILE
##
## Ends in an error in state: 142.
##
## bin_expression -> bin_expression EQUAL . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LARGER UNAME PLUS_ASSIGN
##
## Ends in an error in state: 141.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression LARGER bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression LARGER bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LARGER WHILE
##
## Ends in an error in state: 140.
##
## bin_expression -> bin_expression LARGER . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression LARGER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LBRACK UNAME SEMI
##
## Ends in an error in state: 149.
##
## plain_primary_expression -> primary_expression LBRACK arithmetic_expression . RBRACK [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression LBRACK arithmetic_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LBRACK WHILE
##
## Ends in an error in state: 105.
##
## plain_primary_expression -> primary_expression LBRACK . arithmetic_expression RBRACK [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## primary_expression LBRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LEQ UNAME PLUS_ASSIGN
##
## Ends in an error in state: 139.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression LEQ bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression LEQ bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LEQ WHILE
##
## Ends in an error in state: 138.
##
## bin_expression -> bin_expression LEQ . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN LNAME ASSIGN UNAME SEMI
##
## Ends in an error in state: 295.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## param_call -> lname ASSIGN bin_expression . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## lname ASSIGN bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN LNAME ASSIGN WHILE
##
## Ends in an error in state: 294.
##
## param_call -> lname ASSIGN . bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## lname ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN LNAME WHILE
##
## Ends in an error in state: 293.
##
## name -> lname . [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LPAREN LEQ LBRACK LARGER EQUAL DOT DIVIDE COMMA COLONCOLON BARBAR AMPERAMPER ]
## param_call -> lname . ASSIGN bin_expression [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## lname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN UNAME COMMA WHILE
##
## Ends in an error in state: 291.
##
## param_call_list -> param_call COMMA . param_call_list [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param_call COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN UNAME SEMI
##
## Ends in an error in state: 296.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ RPAREN PLUS NEQ MOD MINUS LEQ LARGER EQUAL DIVIDE COMMA BARBAR AMPERAMPER ]
## param_call -> bin_expression . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME LPAREN WHILE
##
## Ends in an error in state: 90.
##
## function_call_params -> LPAREN . RPAREN [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## function_call_params -> LPAREN . param_call_list RPAREN [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MINUS UNAME PLUS_ASSIGN
##
## Ends in an error in state: 133.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression MINUS bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression MINUS bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MINUS WHILE
##
## Ends in an error in state: 132.
##
## bin_expression -> bin_expression MINUS . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MINUS_ASSIGN WHILE
##
## Ends in an error in state: 166.
##
## plain_assignment -> unary_expression MINUS_ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression MINUS_ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MOD WHILE
##
## Ends in an error in state: 128.
##
## bin_expression -> bin_expression MOD . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MOD_ASSIGN WHILE
##
## Ends in an error in state: 164.
##
## plain_assignment -> unary_expression MOD_ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression MOD_ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME MUL_ASSIGN WHILE
##
## Ends in an error in state: 162.
##
## plain_assignment -> unary_expression MUL_ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression MUL_ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME NEQ UNAME PLUS_ASSIGN
##
## Ends in an error in state: 137.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression NEQ bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression NEQ bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME NEQ WHILE
##
## Ends in an error in state: 136.
##
## bin_expression -> bin_expression NEQ . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME PLUS UNAME PLUS_ASSIGN
##
## Ends in an error in state: 127.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression PLUS bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression PLUS bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME PLUS WHILE
##
## Ends in an error in state: 126.
##
## bin_expression -> bin_expression PLUS . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME PLUS_ASSIGN WHILE
##
## Ends in an error in state: 101.
##
## plain_assignment -> unary_expression PLUS_ASSIGN . arithmetic_expression [ SEMI RPAREN RBRACK EOF END ELSE ELIF COMMA COLON ]
##
## The known suffix of the stack is as follows:
## unary_expression PLUS_ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME SEQ UNAME PLUS_ASSIGN
##
## Ends in an error in state: 135.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression SEQ bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression SEQ bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME SEQ WHILE
##
## Ends in an error in state: 134.
##
## bin_expression -> bin_expression SEQ . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression SEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME SMALLER UNAME PLUS_ASSIGN
##
## Ends in an error in state: 125.
##
## bin_expression -> bin_expression . PLUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MINUS bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . STAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . DIVIDE bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . MOD bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LARGER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . LEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SMALLER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression SMALLER bin_expression . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . SEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . AMPERAMPER bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . BARBAR bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . EQUAL bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
## bin_expression -> bin_expression . NEQ bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression SMALLER bin_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 122, spurious reduction of production bin_expression -> unary_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME SMALLER WHILE
##
## Ends in an error in state: 124.
##
## bin_expression -> bin_expression SMALLER . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression SMALLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME STAR WHILE
##
## Ends in an error in state: 121.
##
## bin_expression -> bin_expression STAR . bin_expression [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS NEQ MOD MINUS LEQ LARGER EQUAL EOF END ELSE ELIF DIVIDE COMMA COLON BARBAR AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## bin_expression STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN UNAME WHILE
##
## Ends in an error in state: 108.
##
## primary_expression_start -> name . COLONCOLON gen_ty_consume [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
## primary_expression_start -> name . [ STAR SMALLER SEQ SEMI RPAREN RBRACK PLUS_ASSIGN PLUS NEQ MUL_ASSIGN MOD_ASSIGN MOD MINUS_ASSIGN MINUS LPAREN LEQ LBRACK LARGER EQUAL EOF END ELSE ELIF DOT DIV_ASSIGN DIVIDE COMMA COLONCOLON COLON BARBAR ASSIGN AMPERAMPER ]
##
## The known suffix of the stack is as follows:
## name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME ASSIGN WHILE
##
## Ends in an error in state: 193.
##
## plain_var_decl -> var_decorator LNAME ASSIGN . arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator LNAME ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON GNAME COMMA WHILE
##
## Ends in an error in state: 196.
##
## separated_nonempty_list(COMMA,var_decl) -> var_decl COMMA . separated_nonempty_list(COMMA,var_decl) [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## var_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME ASSIGN WHILE
##
## Ends in an error in state: 191.
##
## plain_var_decl -> var_decorator LNAME COLON ty ASSIGN . arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator LNAME COLON ty ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME LARGER
##
## Ends in an error in state: 190.
##
## plain_var_decl -> var_decorator LNAME COLON ty . [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator LNAME COLON ty . ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator LNAME COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME SMALLER UNAME COMMA WHILE
##
## Ends in an error in state: 54.
##
## separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ LARGER ]
##
## The known suffix of the stack is as follows:
## ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME SMALLER UNAME SEMI
##
## Ends in an error in state: 53.
##
## separated_nonempty_list(COMMA,ty) -> ty . [ LARGER ]
## separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ LARGER ]
##
## The known suffix of the stack is as follows:
## ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME SMALLER WHILE
##
## Ends in an error in state: 51.
##
## ty_apply -> tyname SMALLER . separated_nonempty_list(COMMA,ty) LARGER [ SEMI RPAREN LARGER EOF END ELSE ELIF COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## tyname SMALLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON UNAME WHILE
##
## Ends in an error in state: 50.
##
## ty_apply -> tyname . SMALLER separated_nonempty_list(COMMA,ty) LARGER [ SEMI RPAREN LARGER EOF END ELSE ELIF COMMA ASSIGN ARROW ]
## ty_apply -> tyname . [ SEMI RPAREN LARGER EOF END ELSE ELIF COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## tyname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME COLON WHILE
##
## Ends in an error in state: 189.
##
## plain_var_decl -> var_decorator LNAME COLON . ty [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator LNAME COLON . ty ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator LNAME COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LNAME WHILE
##
## Ends in an error in state: 188.
##
## plain_var_decl -> var_decorator LNAME . COLON ty [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator LNAME . COLON ty ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
## plain_var_decl -> var_decorator LNAME . ASSIGN arithmetic_expression [ SEMI RPAREN EOF END ELSE ELIF COMMA ]
##
## The known suffix of the stack is as follows:
## var_decorator LNAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET WHILE
##
## Ends in an error in state: 186.
##
## plain_vars_decl -> LET . separated_nonempty_list(COMMA,var_decl) [ SEMI RPAREN EOF END ELSE ELIF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MODULE UNAME DOT WHILE
##
## Ends in an error in state: 12.
##
## separated_nonempty_list(DOT,name) -> name DOT . separated_nonempty_list(DOT,name) [ SEMI ]
##
## The known suffix of the stack is as follows:
## name DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MODULE UNAME SEMI BREAK
##
## Ends in an error in state: 17.
##
## prog -> option(module_clause) . import_decls top_defns EOF [ # ]
##
## The known suffix of the stack is as follows:
## option(module_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(single_sep) -> single_sep 
## In state 10, spurious reduction of production sep -> nonempty_list(single_sep) 
## In state 9, spurious reduction of production plain_module_clause -> MODULE separated_nonempty_list(DOT,name) sep 
## In state 16, spurious reduction of production mark_position(plain_module_clause) -> plain_module_clause 
## In state 396, spurious reduction of production module_clause -> mark_position(plain_module_clause) 
## In state 395, spurious reduction of production option(module_clause) -> module_clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MODULE UNAME SEMI STAR
##
## Ends in an error in state: 7.
##
## nonempty_list(single_sep) -> single_sep . [ WHILE UNAME TRAIT THIS STRING STATIC RET PUB PRINT NULL NOT NEW MINUS LPAREN LOOP LNAME LET LBRACK INT IMPORT IF FOR FN FLOAT EOF END ELSE ELIF DEL CONTINUE CONST CLASS BREAK BOOL BEGIN ]
## nonempty_list(single_sep) -> single_sep . nonempty_list(single_sep) [ WHILE UNAME TRAIT THIS STRING STATIC RET PUB PRINT NULL NOT NEW MINUS LPAREN LOOP LNAME LET LBRACK INT IMPORT IF FOR FN FLOAT EOF END ELSE ELIF DEL CONTINUE CONST CLASS BREAK BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## single_sep
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MODULE UNAME WHILE
##
## Ends in an error in state: 11.
##
## separated_nonempty_list(DOT,name) -> name . [ SEMI ]
## separated_nonempty_list(DOT,name) -> name . DOT separated_nonempty_list(DOT,name) [ SEMI ]
##
## The known suffix of the stack is as follows:
## name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MODULE WHILE
##
## Ends in an error in state: 1.
##
## plain_module_clause -> MODULE . separated_nonempty_list(DOT,name) sep [ TRAIT LET IMPORT FN EOF CLASS ]
##
## The known suffix of the stack is as follows:
## MODULE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON CONST WHILE
##
## Ends in an error in state: 308.
##
## method_decl -> field_decorator . FN lname function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator . FN lname function_params COLON ty ARROW block END [ SEMI END ]
## method_decl -> field_decorator . FN lname gen_ty_def function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator . FN lname gen_ty_def function_params COLON ty ARROW block END [ SEMI END ]
## properties_decl -> field_decorator . LNAME COLON ty [ SEMI END COMMA ]
## properties_decl -> field_decorator . LNAME COLON ty ASSIGN arithmetic_expression [ SEMI END COMMA ]
## properties_decl -> field_decorator . LNAME ASSIGN arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON END SEMI WHILE
##
## Ends in an error in state: 390.
##
## top_defns -> definition sep . top_defns [ EOF ]
##
## The known suffix of the stack is as follows:
## definition sep
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(single_sep) -> single_sep 
## In state 10, spurious reduction of production sep -> nonempty_list(single_sep) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON END WHILE
##
## Ends in an error in state: 389.
##
## top_defns -> definition . [ EOF ]
## top_defns -> definition . sep top_defns [ EOF ]
##
## The known suffix of the stack is as follows:
## definition
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN ARROW END WHILE
##
## Ends in an error in state: 330.
##
## class_body -> field_decl . [ END ]
## class_body -> field_decl . sep class_body [ END ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN ARROW TRAIT
##
## Ends in an error in state: 327.
##
## method_decl -> field_decorator FN lname function_params ARROW . block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN ARROW UNAME ELSE
##
## Ends in an error in state: 328.
##
## method_decl -> field_decorator FN lname function_params ARROW block . END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN COLON UNAME ARROW TRAIT
##
## Ends in an error in state: 324.
##
## method_decl -> field_decorator FN lname function_params COLON ty ARROW . block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params COLON ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN COLON UNAME ARROW UNAME ELSE
##
## Ends in an error in state: 325.
##
## method_decl -> field_decorator FN lname function_params COLON ty ARROW block . END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params COLON ty ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN COLON UNAME SEMI
##
## Ends in an error in state: 323.
##
## method_decl -> field_decorator FN lname function_params COLON ty . ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 322.
##
## method_decl -> field_decorator FN lname function_params COLON . ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME LPAREN RPAREN WHILE
##
## Ends in an error in state: 321.
##
## method_decl -> field_decorator FN lname function_params . ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname function_params . COLON ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname function_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN ARROW TRAIT
##
## Ends in an error in state: 318.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params ARROW . block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN ARROW UNAME ELSE
##
## Ends in an error in state: 319.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params ARROW block . END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME ARROW TRAIT
##
## Ends in an error in state: 315.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params COLON ty ARROW . block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params COLON ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME ARROW UNAME ELSE
##
## Ends in an error in state: 316.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params COLON ty ARROW block . END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params COLON ty ARROW block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production primary_expression_start -> name 
## In state 102, spurious reduction of production primary_expression_access -> primary_expression_start 
## In state 103, spurious reduction of production plain_primary_expression -> primary_expression_access 
## In state 106, spurious reduction of production mark_position(plain_primary_expression) -> plain_primary_expression 
## In state 117, spurious reduction of production primary_expression -> mark_position(plain_primary_expression) 
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 248, spurious reduction of production plain_expression -> arithmetic_expression 
## In state 242, spurious reduction of production mark_position(plain_expression) -> plain_expression 
## In state 243, spurious reduction of production expression -> mark_position(plain_expression) 
## In state 245, spurious reduction of production block -> expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON UNAME SEMI
##
## Ends in an error in state: 314.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params COLON ty . ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 313.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params COLON . ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER LPAREN RPAREN WHILE
##
## Ends in an error in state: 312.
##
## method_decl -> field_decorator FN lname gen_ty_def function_params . ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname gen_ty_def function_params . COLON ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def function_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 311.
##
## method_decl -> field_decorator FN lname gen_ty_def . function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname gen_ty_def . function_params COLON ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname gen_ty_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN LNAME WHILE
##
## Ends in an error in state: 310.
##
## method_decl -> field_decorator FN lname . function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname . function_params COLON ty ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname . gen_ty_def function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN lname . gen_ty_def function_params COLON ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN lname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON FN WHILE
##
## Ends in an error in state: 309.
##
## method_decl -> field_decorator FN . lname function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN . lname function_params COLON ty ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN . lname gen_ty_def function_params ARROW block END [ SEMI END ]
## method_decl -> field_decorator FN . lname gen_ty_def function_params COLON ty ARROW block END [ SEMI END ]
##
## The known suffix of the stack is as follows:
## field_decorator FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME ASSIGN BOOL RPAREN
##
## Ends in an error in state: 71.
##
## separated_nonempty_list(COMMA,properties_decl) -> properties_decl . [ SEMI END ]
## separated_nonempty_list(COMMA,properties_decl) -> properties_decl . COMMA separated_nonempty_list(COMMA,properties_decl) [ SEMI END ]
##
## The known suffix of the stack is as follows:
## properties_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 104, spurious reduction of production unary_expression -> primary_expression 
## In state 100, spurious reduction of production bin_expression -> unary_expression 
## In state 120, spurious reduction of production arithmetic_expression -> bin_expression 
## In state 304, spurious reduction of production properties_decl -> field_decorator LNAME ASSIGN arithmetic_expression 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME ASSIGN WHILE
##
## Ends in an error in state: 303.
##
## properties_decl -> field_decorator LNAME ASSIGN . arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator LNAME ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON GNAME COMMA STATIC FN
##
## Ends in an error in state: 79.
##
## properties_decl -> field_decorator . LNAME COLON ty [ SEMI END COMMA ]
## properties_decl -> field_decorator . LNAME COLON ty ASSIGN arithmetic_expression [ SEMI END COMMA ]
## properties_decl -> field_decorator . LNAME ASSIGN arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 74, spurious reduction of production option(PUB) -> 
## In state 76, spurious reduction of production option(CONST) -> 
## In state 78, spurious reduction of production field_decorator -> option(STATIC) option(PUB) option(CONST) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON GNAME COMMA WHILE
##
## Ends in an error in state: 72.
##
## separated_nonempty_list(COMMA,properties_decl) -> properties_decl COMMA . separated_nonempty_list(COMMA,properties_decl) [ SEMI END ]
##
## The known suffix of the stack is as follows:
## properties_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON GNAME SEMI WHILE
##
## Ends in an error in state: 331.
##
## class_body -> field_decl sep . class_body [ END ]
##
## The known suffix of the stack is as follows:
## field_decl sep
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(single_sep) -> single_sep 
## In state 10, spurious reduction of production sep -> nonempty_list(single_sep) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON UNAME ASSIGN WHILE
##
## Ends in an error in state: 83.
##
## properties_decl -> field_decorator LNAME COLON ty ASSIGN . arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator LNAME COLON ty ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON UNAME RPAREN
##
## Ends in an error in state: 82.
##
## properties_decl -> field_decorator LNAME COLON ty . [ SEMI END COMMA ]
## properties_decl -> field_decorator LNAME COLON ty . ASSIGN arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator LNAME COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production ty_apply -> tyname 
## In state 52, spurious reduction of production plain_ty -> ty_apply 
## In state 56, spurious reduction of production mark_position(plain_ty) -> plain_ty 
## In state 58, spurious reduction of production ty -> mark_position(plain_ty) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME COLON WHILE
##
## Ends in an error in state: 81.
##
## properties_decl -> field_decorator LNAME COLON . ty [ SEMI END COMMA ]
## properties_decl -> field_decorator LNAME COLON . ty ASSIGN arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator LNAME COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON LNAME WHILE
##
## Ends in an error in state: 80.
##
## properties_decl -> field_decorator LNAME . COLON ty [ SEMI END COMMA ]
## properties_decl -> field_decorator LNAME . COLON ty ASSIGN arithmetic_expression [ SEMI END COMMA ]
## properties_decl -> field_decorator LNAME . ASSIGN arithmetic_expression [ SEMI END COMMA ]
##
## The known suffix of the stack is as follows:
## field_decorator LNAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON PUB COMMA
##
## Ends in an error in state: 76.
##
## field_decorator -> option(STATIC) option(PUB) . option(CONST) [ LNAME FN ]
##
## The known suffix of the stack is as follows:
## option(STATIC) option(PUB)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON STATIC COMMA
##
## Ends in an error in state: 74.
##
## field_decorator -> option(STATIC) . option(PUB) option(CONST) [ LNAME FN ]
##
## The known suffix of the stack is as follows:
## option(STATIC)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME COLON WHILE
##
## Ends in an error in state: 68.
##
## plain_trait_def -> TRAIT uname COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## TRAIT uname COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME COLON GNAME WHILE
##
## Ends in an error in state: 65.
##
## gen_ty_def_list -> gen_ty . [ LARGER ]
## gen_ty_def_list -> gen_ty . COMMA gen_ty_def_list [ LARGER ]
##
## The known suffix of the stack is as follows:
## gen_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME COLON WHILE
##
## Ends in an error in state: 49.
##
## plain_gen_ty -> genname COLON . ty [ LARGER COMMA ]
##
## The known suffix of the stack is as follows:
## genname COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME COMMA WHILE
##
## Ends in an error in state: 66.
##
## gen_ty_def_list -> gen_ty COMMA . gen_ty_def_list [ LARGER ]
##
## The known suffix of the stack is as follows:
## gen_ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME LARGER COLON WHILE
##
## Ends in an error in state: 336.
##
## plain_trait_def -> TRAIT uname gen_ty_def COLON . class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## TRAIT uname gen_ty_def COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME LARGER WHILE
##
## Ends in an error in state: 335.
##
## plain_trait_def -> TRAIT uname gen_ty_def . COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## TRAIT uname gen_ty_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER GNAME WHILE
##
## Ends in an error in state: 48.
##
## plain_gen_ty -> genname . [ LARGER COMMA ]
## plain_gen_ty -> genname . COLON ty [ LARGER COMMA ]
##
## The known suffix of the stack is as follows:
## genname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME SMALLER WHILE
##
## Ends in an error in state: 44.
##
## gen_ty_def -> SMALLER . gen_ty_def_list LARGER [ LPAREN IMPL COLON ]
##
## The known suffix of the stack is as follows:
## SMALLER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT UNAME WHILE
##
## Ends in an error in state: 43.
##
## plain_trait_def -> TRAIT uname . COLON class_body END [ SEMI EOF ]
## plain_trait_def -> TRAIT uname . gen_ty_def COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## TRAIT uname
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TRAIT WHILE
##
## Ends in an error in state: 42.
##
## plain_trait_def -> TRAIT . uname COLON class_body END [ SEMI EOF ]
## plain_trait_def -> TRAIT . uname gen_ty_def COLON class_body END [ SEMI EOF ]
##
## The known suffix of the stack is as follows:
## TRAIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

